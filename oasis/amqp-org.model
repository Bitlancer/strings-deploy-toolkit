#"amqp-org" model file

function amqp-org_ApacheWebServer {
  #steps to deploy a amqp-org web server
  log_string="Deploying amqp-org Apache Web Server"
  logger
  check_model #this is in models.case file and sourced at runtime
  #Check to see if we need to pull in the repository
  if [[ -d $gitrepohome$ref/$reposhort ]]
  then
      log_string="Repo already exists, skipping clone."
      logger
  else
      log_string="Repo does not exist, cloning for deployment."
      logger
      #Pull in git repo provided
      ../deploy.sh -c -g "$repo" -r "$reposhort" -R $ref
      #wait for it
      wait $!
      if [[ $? -eq 0 ]]
      then
          log_string="Downloaded git repository."
          logger
      else
          log_string="Download of git repository failed."
          logger
          exit 5
      fi
  fi

  #Check to see if we need to pull in the apache configs from config repo
  if [[ -d $gitrepohome$ref/$config_reposhort ]]
  then
      log_string="Config Repo exists, skipping clone."
      logger
  else
      log_string="Config Repo does not exist, cloning for deployment."
      logger
      #Pull in git repo provided
      ../deploy.sh -c -g "$config_repo" -r "$config_reposhort" -R $ref
      #wait for it
      wait $!
      if [[ $? -eq 0 ]]
      then
          log_string="Downloaded git repository."
          logger
      else
          log_string="Download of git repository failed."
          logger
          exit 5
      fi
  fi

  #Check to see if we need to pull in the cloudfiles data
  #if
  #then
  #else
  #fi
 
  #Check if the tarball is there already
  if [[ -e $packagehome$ref/$model_name.tar.gz ]]
  then
      log_string="Tar file already exists."
      logger
  else
      #Put the data together for packaging
      if [[ -d $staginghome$ref/$model_name ]]
      then
          log_string="Staging path exists."
          logger
      else
          dirpath=$staginghome$ref/$model_name
          log_string="Creating Staging Directory."
          logger
          CreateDir
      fi
          #move stuff
            #move gitdata
              if [[ -d $gitrepohome$ref/$reposhort ]]
              then
                  log_string="Staging repo"
                  logger
                  rsync -a $gitrepohome$ref/$reposhort/ $staginghome$ref/$model_name 2>&1&>>$log
              else
                  log_string="repo data missing to stage, skipping move."
                  logger
              fi
            #move osdata
              if [[ -d $datahome$ref/$oscontainer ]]
              then
                  log_string="Staging OSSwift Data."
                  logger
                  rsync -a $datahome$ref/$oscontainer $staginghome$ref/$model_name 2>&1&>>$log
              else
                  log_string="OSSwift data missing to stage, skipping move."
                  logger
              fi
            #move proper apache configs
              if [[ -d $gitrepohome$ref/$config_reposhort/apache/$model_name ]]
              then
                  log_string="Staging apache configs"
                  logger
                  rsync -a $gitrepohome$ref/$config_reposhort/apache/$model_name $staginghome$ref/$model_name-config 2>&1&>>$log
              else
                  log_string="Config repo data missing to stage, skipping move."
                  logger
              fi
          #package it up
            if [[ -d $packagehome$ref ]]
            then
                log_string="Packaged home already exists."
                logger
            else
                #make sure packaged home exists
                dirpath=$packagehome$ref
                CreateDir
            fi
          #set directory to compress
          tarpath="$staginghome$ref/"
          create_tarball
  fi
 
  #prepare path on remote server
  log_string="Attempting to create remote deploy directory $deployroot/$ref on $server_hostname"
  logger
  ssh root@$server_hostname mkdir -p $deployroot/$ref 2>&1&>>$log
  if [[ $? -eq 0 ]]
  then 
      log_string="Remote path created on $server_hostname"
      logger
      #scp it to the server
      log_string="Attempting to transfer deployment package to $server_hostname"
      logger
      scp $packagehome$ref/$model_name.tar.gz root@$server_hostname:"$deployroot"/"$ref"/$model_name.tar.gz 2>&1&>>$log
      if [[ $? -eq 0 ]]
      then 
          log_string="Package transferred successfully to $server_hostname."
          logger
      else
          log_string="Package transfer failed to $server_hostname."
          logger
          rm_lock
          exit 5
      fi
  else
      log_string="Failed to create remote path on $server_hostname"
      logger
      rm_lock
      exit 5
  fi
  #begin building remote script
  echo "#!/bin/bash" > $server_hostname.$ref.sh
  #write deploy.sh untar command into servername.ref.sh
  echo "cd $deployroot/$ref && tar -xvf $deployroot/$ref/$model_name.tar.gz >> $log" >> $server_hostname.$ref.sh

  #write command to stop apache into servername.ref.sh
  echo "/etc/init.d/httpd stop" >> $server_hostname.$ref.sh
 #write command to mv old apache config to /root/deploy/ref/backup/httpd.conf into servername.ref.sh
  echo "if [[ -d $deployroot/$ref/backup/conf ]]" >> $server_hostname.$ref.sh
  echo "then" >> $server_hostname.$ref.sh
  echo "    log_string=\"Backup path exists\"" >> $server_hostname.$ref.sh
  echo "    logger" >> $server_hostname.$ref.sh
  echo "else" >> $server_hostname.$ref.sh
  echo "    mkdir -p $deployroot/$ref/backup/conf" >> $server_hostname.$ref.sh
  echo "fi" >> $server_hostname.$ref.sh
  echo "log_string=\"Backing up old apache confs\"" >> $server_hostname.$ref.sh
  echo "logger" >> $server_hostname.$ref.sh
  echo "mv /etc/httpd/conf.d/*.conf $deployroot/$ref/backup/conf/" >> $server_hostname.$ref.sh

#write command to mv new apache configs to /etc/httpd.conf into servername.ref.sh
echo "mv $deployroot/$ref/$model_name-config/$model_name/*.conf /etc/httpd/conf.d/" >> $server_hostname.$ref.sh

  #write command to test apache configs into servername.ref.sh
  echo "   apachectl -t  >> $log" >> $server_hostname.$ref.sh
  echo "  if [[ \$? -eq 0 ]]" >> $server_hostname.$ref.sh
  echo "  then" >> $server_hostname.$ref.sh
  echo "      log_string=\"Config looks good\"" >> $server_hostname.$ref.sh
  echo "      logger" >> $server_hostname.$ref.sh
  echo "  else" >> $server_hostname.$ref.sh
  echo "      echo \"Reverting Config\"" >> $server_hostname.$ref.sh
  echo "      log_string=\"Bad config file\"" >> $server_hostname.$ref.sh
  echo "      logger" >> $server_hostname.$ref.sh
  echo "      mv /etc/httpd/conf.d/*.conf $deployroot/$ref/$model_name-config/$model_name/" >> $server_hostname.$ref.sh
  echo "      mv $deployroot/$ref/backup/conf/*.conf /etc/httpd/conf.d/" >> $server_hostname.$ref.sh
  echo "      /etc/init.d/httpd start" >> $server_hostname.$ref.sh
  echo "      exit 5" >> $server_hostname.$ref.sh
  echo "  fi" >> $server_hostname.$ref.sh
 # echo "done" >> $server_hostname.$ref.sh
  #write command to stop apache into servername.ref.sh
#  echo "/etc/init.d/httpd stop" >> $server_hostname.$ref.sh

  #write command to mv old apache data to /root/deploy/backup/httpd-data into servername.ref.sh
  echo "if [[ -d $deployroot/$ref/backup/httpd ]]" >> $server_hostname.$ref.sh
  echo "then" >> $server_hostname.$ref.sh
  echo "    log_string=\"Backup path exists\"" >> $server_hostname.$ref.sh
  echo "    logger" >> $server_hostname.$ref.sh
  echo "else" >> $server_hostname.$ref.sh
  echo "    mkdir -p $deployroot/$ref/backup/httpd" >> $server_hostname.$ref.sh
  echo "fi" >> $server_hostname.$ref.sh
  echo "log_string=\"Moving apache data to backup\"" >> $server_hostname.$ref.sh
  echo "logger" >> $server_hostname.$ref.sh
  echo "mv /var/www/vhosts/$model_name $deployroot/$ref/backup/httpd/" >> $server_hostname.$ref.sh

  #write command to mv new apache configs to /var/www/vhosts/modelname into servername.ref.sh

  #write command to start apache into servername.ref.sh

  #write command to cleanup if needed into servername.ref.sh

  #run servername.ref.sh remotely on each server with ssh
  #example: ssh root@servername 'bash -s' < commandlist.sh
  scp $server_hostname.$ref.sh root@$server_hostname:$deployroot/$ref/
  ssh root@$server_hostname chmod 700 $deployroot/$ref/$server_hostname.$ref.sh
  ssh root@$server_hostname $deployroot/$ref/$server_hostname.$ref.sh &
  wait $!
  #if the exit code is less then 1 (successful) remove the servername.ref.sh
  if [[ $? -eq 0 ]]
  then
      log_string="Completed remote work successfully for $server_hostname." 
      logger
  else
      log_string="Remote work failed for $server_hostname."
      logger
      rm_lock
      exit 5
  fi
  #log deployment status for server

 }

function amqp-org_MySQLServer {
  log_string="No deploy work to do for a MySQL Server Profile."
  logger
}

function amqp-org_BaseNode {
  log_string="No deploy work to do for a Base Node Server Profile."
  logger
}

